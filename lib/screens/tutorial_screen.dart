import 'package:flutter/material.dart';
import '../main.dart';
import '../models/choice_card.dart';
import '../services/game_service.dart';
import 'game_screen.dart';

/// –≠–∫—Ä–∞–Ω –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã
class TutorialScreen extends StatefulWidget {
  final GameCharacter selectedCharacter;
  
  const TutorialScreen({
    super.key,
    required this.selectedCharacter,
  });

  @override
  State<TutorialScreen> createState() => _TutorialScreenState();
}

class _TutorialScreenState extends State<TutorialScreen>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _slideController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeIn,
    ));
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.5),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutBack,
    ));
    
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
    _fadeController.forward();
    _slideController.forward();
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  /// –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
  Future<void> _startGame() async {
    try {
      final gameService = GameService();
      final success = await gameService.startNewGame(widget.selectedCharacter.id);
      
      if (success && mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => const GameScreen(),
          ),
        );
      } else {
        _showError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞: $e');
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
  void _showError(String message) {
    if (!mounted) return;
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: AppColors.error,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.backgroundLight,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: AppColors.textDark),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SafeArea(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: Column(
              children: [
                Expanded(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(AppSizes.paddingLarge),
                    child: Column(
                      children: [
                        // –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                        _buildCharacterGreeting(),
                        
                        const SizedBox(height: 32),
                        
                        // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
                        _buildRulesExplanation(),
                        
                        const SizedBox(height: 32),
                        
                        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —à–∫–∞–ª
                        _buildStatsDemo(),
                        
                        const SizedBox(height: 32),
                        
                        // –ü—Ä–∏–º–µ—Ä –≤—ã–±–æ—Ä–∞
                        _buildChoiceExample(),
                      ],
                    ),
                  ),
                ),
                
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
                Padding(
                  padding: const EdgeInsets.all(AppSizes.paddingLarge),
                  child: SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: _startGame,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.accentOrange,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        textStyle: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      child: const Text('–ü–æ–Ω—è—Ç–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º!'),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  Widget _buildCharacterGreeting() {
    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
        boxShadow: [
          BoxShadow(
            color: AppColors.primaryBlue.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          // –ü–µ—Ä—Å–æ–Ω–∞–∂
          Container(
            width: 100,
            height: 100,
            decoration: BoxDecoration(
              color: AppColors.backgroundLight,
              borderRadius: BorderRadius.circular(50),
            ),
            child: Center(
              child: Text(
                widget.selectedCharacter.icon,
                style: const TextStyle(fontSize: 50),
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
          Text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø ${widget.selectedCharacter.name}!',
            style: Theme.of(context).textTheme.headlineMedium,
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 8),
          
          Text(
            '–î–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å!',
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              color: AppColors.textDark.withOpacity(0.8),
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  /// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
  Widget _buildRulesExplanation() {
    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
        boxShadow: [
          BoxShadow(
            color: AppColors.primaryBlue.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            '–î–µ–ª–∞–π —É–º–Ω—ã–µ –≤—ã–±–æ—Ä—ã –∏ —Å—Ç–∞–Ω—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º!',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
              color: AppColors.accentOrange,
            ),
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 16),
          
          Text(
            '–í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∂–¥—ã–π –≤—ã–±–æ—Ä –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.',
            style: Theme.of(context).textTheme.bodyLarge,
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —à–∫–∞–ª
  Widget _buildStatsDemo() {
    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
        boxShadow: [
          BoxShadow(
            color: AppColors.primaryBlue.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            '–°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏:',
            style: Theme.of(context).textTheme.headlineMedium,
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 20),
          
          // –®–∫–∞–ª—ã
          _buildStatBar('üí∞', '–î–µ–Ω—å–≥–∏', '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å', AppColors.moneyYellow, 3),
          const SizedBox(height: 12),
          _buildStatBar('üìò', '–ó–Ω–∞–Ω–∏—è', '–£–º—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', AppColors.knowledgeBlue, 3),
          const SizedBox(height: 12),
          _buildStatBar('üí°', '–≠–Ω–µ—Ä–≥–∏—è', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', AppColors.energyOrange, 3),
        ],
      ),
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —à–∫–∞–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Widget _buildStatBar(String icon, String title, String description, Color color, int value) {
    return Row(
      children: [
        // –ò–∫–æ–Ω–∫–∞
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: color.withOpacity(0.2),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Center(
            child: Text(icon, style: const TextStyle(fontSize: 20)),
          ),
        ),
        
        const SizedBox(width: 12),
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                description,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: AppColors.textDark.withOpacity(0.7),
                ),
              ),
            ],
          ),
        ),
        
        // –®–∫–∞–ª–∞
        Row(
          children: List.generate(5, (index) {
            return Container(
              width: 20,
              height: 20,
              margin: const EdgeInsets.symmetric(horizontal: 2),
              decoration: BoxDecoration(
                color: index < value ? color : color.withOpacity(0.3),
                borderRadius: BorderRadius.circular(10),
              ),
            );
          }),
        ),
      ],
    );
  }

  /// –ü—Ä–∏–º–µ—Ä –≤—ã–±–æ—Ä–∞
  Widget _buildChoiceExample() {
    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
        boxShadow: [
          BoxShadow(
            color: AppColors.primaryBlue.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            '–ü—Ä–∏–º–µ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏:',
            style: Theme.of(context).textTheme.headlineMedium,
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 16),
          
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppColors.backgroundLight,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              '"–£—Ç—Ä–æ–º –ø—Ä–æ—Å–Ω—É–ª—Å—è"',
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          
          const SizedBox(height: 16),
          
          // –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
          Row(
            children: [
              Expanded(
                child: _buildExampleChoice(
                  'üõèÔ∏è',
                  '–ü–æ—Å–ø–∞—Ç—å –µ—â—ë',
                  'üí°+1 üìò-1',
                  Colors.blue,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildExampleChoice(
                  'üèÉ',
                  '–ó–∞—Ä—è–¥–∫–∞',
                  'üí°+1',
                  Colors.green,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 12),
          
          Text(
            '–ö–∞–∂–¥—ã–π –≤—ã–±–æ—Ä –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ-—Ä–∞–∑–Ω–æ–º—É!',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              color: AppColors.textDark.withOpacity(0.8),
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≤—ã–±–æ—Ä–∞
  Widget _buildExampleChoice(String icon, String text, String effect, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Text(icon, style: const TextStyle(fontSize: 24)),
          const SizedBox(height: 8),
          Text(
            text,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 4),
          Text(
            effect,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: color,
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
} 