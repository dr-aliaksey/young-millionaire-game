import 'package:flutter/material.dart';
import '../main.dart';
import '../models/choice_card.dart';
import '../services/game_service.dart';
import 'character_selection_screen.dart';
import 'home_screen.dart';

/// –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
class ResultScreen extends StatefulWidget {
  const ResultScreen({super.key});

  @override
  State<ResultScreen> createState() => _ResultScreenState();
}

class _ResultScreenState extends State<ResultScreen>
    with TickerProviderStateMixin {
  late AnimationController _celebrationController;
  late AnimationController _slideController;
  late Animation<double> _celebrationAnimation;
  late Animation<Offset> _slideAnimation;

  final GameService _gameService = GameService();
  
  GameStats? _gameStats;
  GameTitle? _earnedTitle;
  GameCharacter? _character;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
    _celebrationController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    
    _celebrationAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _celebrationController,
      curve: Curves.elasticOut,
    ));
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutBack,
    ));
    
    _loadResults();
  }

  @override
  void dispose() {
    _celebrationController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
  Future<void> _loadResults() async {
    try {
      _gameStats = _gameService.getGameStats();
      _earnedTitle = await _gameService.getFinalTitle();
      _character = _gameStats?.character;

      setState(() {
        _isLoading = false;
      });

      // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
      _slideController.forward();
      await Future.delayed(const Duration(milliseconds: 500));
      _celebrationController.forward();

    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
  void _playAgain() {
    Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(
        builder: (context) => const CharacterSelectionScreen(),
      ),
      (route) => false,
    );
  }

  /// –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  void _backToHome() {
    Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(
        builder: (context) => const HomeScreen(),
      ),
      (route) => false,
    );
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–∑–∞–≥–ª—É—à–∫–∞)
  void _shareResult() {
    if (_earnedTitle == null || _gameStats == null) return;
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —à–∞—Ä–∏–Ω–≥–∞
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–§—É–Ω–∫—Ü–∏—è "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!'),
        backgroundColor: AppColors.primaryBlue,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        backgroundColor: AppColors.backgroundLight,
        body: const Center(
          child: CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(AppColors.accentOrange),
          ),
        ),
      );
    }

    return Scaffold(
      backgroundColor: AppColors.backgroundLight,
      body: SafeArea(
        child: SlideTransition(
          position: _slideAnimation,
          child: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(AppSizes.paddingLarge),
                  child: Column(
                    children: [
                      const SizedBox(height: 20),
                      
                      // –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                      _buildCongratulations(),
                      
                      const SizedBox(height: 32),
                      
                      // –¢–∏—Ç—É–ª –∏ –º–µ–¥–∞–ª—å
                      _buildTitleCard(),
                      
                      const SizedBox(height: 32),
                      
                      // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                      _buildFinalStats(),
                      
                      const SizedBox(height: 32),
                      
                      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                      _buildAchievements(),
                    ],
                  ),
                ),
              ),
              
              // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
              _buildActionButtons(),
            ],
          ),
        ),
      ),
    );
  }

  /// –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
  Widget _buildCongratulations() {
    return ScaleTransition(
      scale: _celebrationAnimation,
      child: Column(
        children: [
          // –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç–º–æ–¥–∑–∏
          const Text(
            'üéâ üéä üèÜ üéä üéâ',
            style: TextStyle(fontSize: 32),
          ),
          
          const SizedBox(height: 16),
          
          Text(
            AppTexts.congratulations,
            style: Theme.of(context).textTheme.headlineLarge?.copyWith(
              color: AppColors.accentOrange,
              fontSize: 32,
            ),
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 8),
          
          Text(
            _getCongratulatoryMessage(),
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              color: AppColors.textDark.withOpacity(0.8),
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  String _getCongratulatoryMessage() {
    if (_gameStats == null) return AppTexts.gameCompleted;
    
    final totalScore = _gameStats!.currentStats.totalScore;
    
    if (totalScore >= 13) {
      return '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∏–ª–ª–∏–æ–Ω–µ—Ä!';
    } else if (totalScore >= 10) {
      return '–•–æ—Ä–æ—à–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –µ—â—ë –ª—É—á—à–µ!';
    } else {
      return '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å!';
    }
  }

  /// –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏—Ç—É–ª–∞
  Widget _buildTitleCard() {
    if (_earnedTitle == null || _character == null) {
      return const SizedBox.shrink();
    }

    return AnimatedBuilder(
      animation: _celebrationAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: 0.8 + (_celebrationAnimation.value * 0.2),
          child: Container(
            padding: const EdgeInsets.all(AppSizes.paddingLarge),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  AppColors.accentOrange,
                  AppColors.accentOrange.withOpacity(0.8),
                ],
              ),
              borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
              boxShadow: [
                BoxShadow(
                  color: AppColors.accentOrange.withOpacity(0.3),
                  blurRadius: 20,
                  offset: const Offset(0, 10),
                ),
              ],
            ),
            child: Column(
              children: [
                // –ü–µ—Ä—Å–æ–Ω–∞–∂
                Container(
                  width: 100,
                  height: 100,
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(50),
                  ),
                  child: Center(
                    child: Text(
                      _character!.icon,
                      style: const TextStyle(fontSize: 50),
                    ),
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // –ò–∫–æ–Ω–∫–∞ —Ç–∏—Ç—É–ª–∞
                Text(
                  _earnedTitle!.icon,
                  style: const TextStyle(fontSize: 40),
                ),
                
                const SizedBox(height: 8),
                
                // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
                Text(
                  _earnedTitle!.name,
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
                
                const SizedBox(height: 8),
                
                // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
                Text(
                  _earnedTitle!.description,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  /// –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Widget _buildFinalStats() {
    if (_gameStats == null) return const SizedBox.shrink();

    final stats = _gameStats!.currentStats;

    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
        boxShadow: [
          BoxShadow(
            color: AppColors.primaryBlue.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            '–¢–≤–æ–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:',
            style: Theme.of(context).textTheme.headlineMedium,
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 20),
          
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          _buildFinalStatRow('üí∞', '–î–µ–Ω—å–≥–∏', stats.money, AppColors.moneyYellow),
          const SizedBox(height: 16),
          _buildFinalStatRow('üìò', '–ó–Ω–∞–Ω–∏—è', stats.knowledge, AppColors.knowledgeBlue),
          const SizedBox(height: 16),
          _buildFinalStatRow('üí°', '–≠–Ω–µ—Ä–≥–∏—è', stats.energy, AppColors.energyOrange),
          
          const SizedBox(height: 20),
          
          // –û–±—â–∏–π –±–∞–ª–ª
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: AppColors.backgroundLight,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '–û–±—â–∏–π –±–∞–ª–ª:',
                  style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  '${stats.totalScore}/15',
                  style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: AppColors.accentOrange,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// –°—Ç—Ä–æ–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Widget _buildFinalStatRow(String icon, String title, int value, Color color) {
    return Row(
      children: [
        // –ò–∫–æ–Ω–∫–∞
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: color.withOpacity(0.2),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Center(
            child: Text(icon, style: const TextStyle(fontSize: 20)),
          ),
        ),
        
        const SizedBox(width: 16),
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ
        Expanded(
          child: Text(
            title,
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        
        // –ó–Ω–∞—á–µ–Ω–∏–µ
        Text(
          '$value/5',
          style: Theme.of(context).textTheme.bodyLarge?.copyWith(
            fontWeight: FontWeight.bold,
            color: color,
          ),
        ),
        
        const SizedBox(width: 16),
        
        // –ó–≤–µ–∑–¥—ã
        Row(
          children: List.generate(5, (index) {
            return Icon(
              index < value ? Icons.star : Icons.star_border,
              color: color,
              size: 20,
            );
          }),
        ),
      ],
    );
  }

  /// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Widget _buildAchievements() {
    if (_gameStats == null) return const SizedBox.shrink();

    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
        boxShadow: [
          BoxShadow(
            color: AppColors.primaryBlue.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:',
            style: Theme.of(context).textTheme.headlineMedium,
            textAlign: TextAlign.center,
          ),
          
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: _buildAchievementCard(
                  'üéØ',
                  '–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ',
                  '${_gameStats!.totalRounds}',
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildAchievementCard(
                  '‚≠ê',
                  '–õ—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å',
                  _gameStats!.bestStat,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Widget _buildAchievementCard(String icon, String title, String value) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.backgroundLight,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Text(icon, style: const TextStyle(fontSize: 24)),
          const SizedBox(height: 8),
          Text(
            title,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: AppColors.textDark.withOpacity(0.7),
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 4),
          Text(
            value,
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: AppColors.accentOrange,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  /// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  Widget _buildActionButtons() {
    return Container(
      padding: const EdgeInsets.all(AppSizes.paddingLarge),
      child: Column(
        children: [
          // –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: _playAgain,
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.accentOrange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                textStyle: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              child: const Text(AppTexts.playAgain),
            ),
          ),
          
          const SizedBox(height: 12),
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
          Row(
            children: [
              Expanded(
                child: OutlinedButton(
                  onPressed: _shareResult,
                  style: OutlinedButton.styleFrom(
                    foregroundColor: AppColors.primaryBlue,
                    side: const BorderSide(color: AppColors.primaryBlue),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: const Text(AppTexts.saveResult),
                ),
              ),
              
              const SizedBox(width: 12),
              
              Expanded(
                child: OutlinedButton(
                  onPressed: _backToHome,
                  style: OutlinedButton.styleFrom(
                    foregroundColor: AppColors.textDark,
                    side: BorderSide(color: AppColors.textDark.withOpacity(0.5)),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: const Text('–í –º–µ–Ω—é'),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
} 